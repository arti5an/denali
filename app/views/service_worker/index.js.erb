(function() {
  'use strict';

  const version = '<%= @release_version %>';

  self.addEventListener('install', event => {
    self.skipWaiting();
  });

  self.addEventListener('fetch', event => {
    let request = event.request;
    let url = new URL(request.url);

    // Ignore non-GET and non-HTML requests
    if ((request.method !== 'GET') || (request.headers.get('Accept').indexOf('text/html') === -1) || event.request.url.match(/\/admin\//) || event.request.url.match(/\/thumbor\//)) {
      return;
    }

    // For HTML requests, make a new request that includes the version as an HTTP header
    let newRequest;
    let newHeaders = new Headers();
    for (let header of event.request.headers.entries()) {
      newHeaders.set(header[0], header[1]);
    }
    newHeaders.set('X-Denali-Version', version);

    newRequest = new Request(event.request.url, {
      method: 'GET',
      headers: newHeaders,
      mode: 'same-origin',
      credentials: request.credentials,
      redirect: 'manual'
    });

    event.respondWith(fetch(newRequest).then(response => { return response; }));
    return;
  });

  self.addEventListener('push', function (event) {
    const data = event.data.json();

    const options = {
      body: data.body,
      icon: data.icon,
      image: data.image,
      data: {
        dateOfArrival: Date.now(),
        primaryKey: data.primaryKey || '-',
        url: data.url
      }
    };

    event.waitUntil(self.registration.showNotification(data.title, options));
  });

  self.addEventListener('notificationclick', function (event) {
    const clickedNotification = event.notification;
    clickedNotification.close();
    event.waitUntil(clients.openWindow(clickedNotification.data.url));
  });


})();
